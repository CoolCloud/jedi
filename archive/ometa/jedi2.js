var ometajs_ = require("ometajs");var AbstractGrammar = ometajs_.grammars.AbstractGrammar;var BSJSParser = ometajs_.grammars.BSJSParser;var BSJSIdentity = ometajs_.grammars.BSJSIdentity;var BSJSTranslator = ometajs_.grammars.BSJSTranslator;var util = {isArray: Array.isArray}
util.flattenStrings = function flattenStrings(a) {
	if (!util.isArray(a)) return a
	if (a.length > 0 && a.every(util.isChar)) return a.join("")
	else return a.map(flattenStrings)
}
util.isChar = function isChar(c) {
	return typeof c === "string" && c.length === 1
}

function test(ometa, input, rule, args) {
	console.log(
		util.flattenStrings(ometa.matchAll(input, rule, args))
	)
}

function toUTF16(codePoint) {
	if (codePoint < 0x10000) return String.fromCharCode(codePoint)
	codePoint -= 0x10000
	var lead = (codePoint >> 10) + 0xd800
	var trail = (codePoint & 0x3ff) + 0xdc00
	return String.fromCharCode(lead, trail)
}
var Lines = function Lines(source) {AbstractGrammar.call(this, source)};Lines.grammarName = "Lines";Lines.match = AbstractGrammar.match;Lines.matchAll = AbstractGrammar.matchAll;exports.Lines = Lines;require("util").inherits(Lines, AbstractGrammar);Lines.prototype["lines"] = function $lines() {return (this._any(function() {  return this._atomic(function() { return this._rule("line",false,[],null,this["line"])  });}))};
Lines.prototype["line"] = function $line() {return (this._atomic(function() {return this._any(function() {  return this._atomic(function() { return this._rule("whitespace",false,[],null,this["whitespace"])  });}) && this._rule("eol",false,[],null,this["eol"]) && this._exec("")}) || this._atomic(function() {var x;return this._any(function() {  return this._atomic(function() { return this._rule("whitespace",false,[],null,this["whitespace"])  });}) && (this._atomic(function() {return this._rule("ignore",false,[],null,this["ignore"]) && this._rule("content",false,[],null,this["content"])})) && ((x = this._getIntermediate()), true) && this._rule("eol",false,[],null,this["eol"]) && this._exec(x)}) || this._atomic(function() {var x;return this._rule("content",false,[],null,this["content"]) && ((x = this._getIntermediate()), true) && this._rule("eol",false,[],null,this["eol"]) && this._exec(x)}))};
Lines.prototype["ignore"] = function $ignore() {return (this._match("/") && this._match("/"))};
Lines.prototype["content"] = function $content() {return (this._any(function() {  return this._atomic(function() { return (!this._atomic(function() {return this._rule("eol",false,[],null,this["eol"])}, true) && this._rule("char",false,[],null,this["char"]))  });}))};
Lines.prototype["eol"] = function $eol() {return (this._atomic(function() {return this._match("\r") && this._match("\n")}) || this._atomic(function() {return this._match("\n") && this._match("\r")}) || this._match("\n") || this._match("\r"))};
Lines.prototype["whitespace"] = function $whitespace() {return (this._atomic(function() {return !this._atomic(function() {return this._rule("eol",false,[],null,this["eol"])}, true) && this._rule("space",false,[],null,this["space"])}) || this._match("Â…"))};
Lines.prototype["END"] = function $END() {return true};
var UnicodeLines = function UnicodeLines(source) {Lines.call(this, source)};UnicodeLines.grammarName = "UnicodeLines";UnicodeLines.match = Lines.match;UnicodeLines.matchAll = Lines.matchAll;exports.UnicodeLines = UnicodeLines;require("util").inherits(UnicodeLines, Lines);UnicodeLines.prototype["eol"] = function $eol() {return (this._atomic(function() {return this._rule("eol",false,[],Lines,Lines.prototype["eol"])}) || this._atomic(function() {var c;return this._rule("char",false,[],null,this["char"]) && ((c = this._getIntermediate()), true) && (/^[\u2028\u2029]/.test(c))}))};
UnicodeLines.prototype["END"] = function $END() {return true};
test(UnicodeLines, "Hello world!\nThis is a simple test.", "lines")
var Blocks = function Blocks(source) {AbstractGrammar.call(this, source)};Blocks.grammarName = "Blocks";Blocks.match = AbstractGrammar.match;Blocks.matchAll = AbstractGrammar.matchAll;exports.Blocks = Blocks;require("util").inherits(Blocks, AbstractGrammar);Blocks.prototype["blocks"] = function $blocks() {var x;return this._rule("startBody",false,[],null,this["startBody"]) && this._any(function() {  return this._atomic(function() { return (this._atomic(function() {return this._rule("skip",false,[],null,this["skip"])}) || this._atomic(function() {return this._rule("parseBlock",false,[],null,this["parseBlock"])}) || this._atomic(function() {return this._rule("offside",false,[],null,this["offside"])}))  });}) && ((x = this._getIntermediate()), true) && this._rule("endBody",false,[],null,this["endBody"]) && this._exec(x)};
Blocks.prototype["startBody"] = function $startBody() {return this._exec(function(){if(!this.indents)this.indents=[];return this.indents.unshift(null)}.call(this))};
Blocks.prototype["endBody"] = function $endBody() {return this._exec(function(){return this.indents.shift()}.call(this))};
Blocks.prototype["parseBlock"] = function $parseBlock() {var error, head, body;return this._list(function() {return this._rule("indent",false,[],null,this["indent"]) && this._optional(function() {return this._rule("mixed",false,[],null,this["mixed"])}) && ((error = this._getIntermediate()), true) && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((head = this._getIntermediate()), true)}) && this._any(function() {  return this._atomic(function() { return (this._atomic(function() {return this._rule("skip",false,[],null,this["skip"])}) || this._atomic(function() {var x;return this._list(function() {return this._rule("indent",false,[],null,this["indent"]) && this._rule("tab",false,[],null,this["tab"]) && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((x = this._getIntermediate()), true)}) && this._exec(x)}))  });}) && ((body = this._getIntermediate()), true) && this._rule("block",false,[head,body,error],null,this["block"])};
Blocks.prototype["block"] = function $block() {var head, body, error;return this._skip() && ((head = this._getIntermediate()), true) && this._skip() && ((body = this._getIntermediate()), true) && this._skip() && ((error = this._getIntermediate()), true) && this._exec(["Block",head,body].concat(error?[error]:[]))};
Blocks.prototype["offside"] = function $offside() {var line;return this._skip() && ((line = this._getIntermediate()), true) && this._exec(["Offside",line])};
Blocks.prototype["mixed"] = function $mixed() {var whitespaces, c;return this._many(function() {  return this._atomic(function() { return (this._rule("char",false,[],null,this["char"]) && ((c = this._getIntermediate()), true) && (/^[\u0000-\u0020\u0085\u00A0\u1680\u180E\u2000-\u200A\u202F\u205F\u3000\uFDD0-\uFDEF\uFEFF\uFFFE\uFFFF]/.test(c)))  });}) && ((whitespaces = this._getIntermediate()), true) && this._exec(["MixedWhitespaces",whitespaces])};
Blocks.prototype["skip"] = function $skip() {return (this._list(function() {return true}) || this._list(function() {return this._rule("ignore",false,[],null,this["ignore"]) && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });})}))};
Blocks.prototype["ignore"] = function $ignore() {return (this._match("/") && this._match("/"))};
Blocks.prototype["indent"] = function $indent() {var x;return (this._atomic(function() {return ((this.indents[0]===null) && this._any(function() {  return this._atomic(function() { return this._rule("tab",false,[],null,this["tab"])  });}) && ((x = this._getIntermediate()), true) && this._exec(this.indents[0]=x.length))}) || this._atomic(function() {return (this._rule("repeat",false,["tab",this.indents[0]],null,this["repeat"]))}))};
Blocks.prototype["tab"] = function $tab() {return (this._match("\t") || this._atomic(function() {var x;return this._rule("tabSize",false,[],null,this["tabSize"]) && ((x = this._getIntermediate()), true) && (x!==null) && this._rule("repeat",false,["sp",x],null,this["repeat"])}))};
Blocks.prototype["sp"] = function $sp() {return (this._match(" "))};
Blocks.prototype["tabSize"] = function $tabSize() {return this._exec(null)};
Blocks.prototype["repeat"] = function $repeat() {var r, n;return this._skip() && ((r = this._getIntermediate()), true) && this._skip() && ((n = this._getIntermediate()), true) && (this._atomic(function() {return (n===0)}) || this._atomic(function() {return this._rule("apply",false,[r],null,this["apply"]) && this._rule("repeat",false,[r,n-1],null,this["repeat"])}))};
Blocks.prototype["END"] = function $END() {return true};
test(Blocks, ["", "head", "", "\tbody line", "\tbody line"], "blocks")
var Parser = function Parser(source) {Blocks.call(this, source)};Parser.grammarName = "Parser";Parser.match = Blocks.match;Parser.matchAll = Blocks.matchAll;exports.Parser = Parser;require("util").inherits(Parser, Blocks);Parser.prototype["doc"] = function $doc() {return this._rule("blocks",false,[],null,this["blocks"]) && this._rule("end",false,[],null,this["end"])};
Parser.prototype["block"] = function $block() {return (this._atomic(function() {return this._rule("doctype",false,[],null,this["doctype"])}) || this._atomic(function() {return this._rule("comment",false,[],null,this["comment"])}) || this._atomic(function() {return this._rule("suppress",false,[],null,this["suppress"])}) || this._atomic(function() {return this._rule("inject",false,[],null,this["inject"])}) || this._atomic(function() {return this._rule("filter",false,[],null,this["filter"])}) || this._atomic(function() {return this._rule("binding",false,[],null,this["binding"])}) || this._atomic(function() {return this._rule("text",false,[],null,this["text"])}) || this._atomic(function() {return this._rule("element",false,[],null,this["element"])}) || this._atomic(function() {return this._rule("attribute",false,[],null,this["attribute"])}) || this._atomic(function() {return this._rule("placeholder",false,[],null,this["placeholder"])}) || this._atomic(function() {return this._rule("block",false,[],Blocks,Blocks.prototype["block"])}))};
Parser.prototype["doctype"] = function $doctype() {var x;return (this._list(function() {return this._match("!") && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((x = this._getIntermediate()), true)}) && this._exec(["DocType",x.join("")]))};
Parser.prototype["comment"] = function $comment() {var x, y, e;return (this._list(function() {return this._rule("commentStart",false,[],null,this["commentStart"]) && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((x = this._getIntermediate()), true)}) && this._skip() && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Comment",[x].concat(y)]))};
Parser.prototype["commentStart"] = function $commentStart() {return (this._match("!"))};
Parser.prototype["suppress"] = function $suppress() {var x, y, e;return (this._list(function() {return this._rule("suppressStart",false,[],null,this["suppressStart"]) && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((x = this._getIntermediate()), true)}) && this._skip() && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Suppress",[x].concat(y)]))};
Parser.prototype["suppressStart"] = function $suppressStart() {return (this._match("-") && this._match("-"))};
Parser.prototype["inject"] = function $inject() {var x, y, e;return (this._list(function() {return this._rule("injectStart",false,[],null,this["injectStart"]) && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((x = this._getIntermediate()), true)}) && this._skip() && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Inject",[x].concat(y)]))};
Parser.prototype["injectStart"] = function $injectStart() {return (this._match("-"))};
Parser.prototype["binding"] = function $binding() {var x, y, e;return (this._list(function() {return this._rule("bindingForm",false,[],null,this["bindingForm"]) && ((x = this._getIntermediate()), true)}) && this._list(function() {return this._rule("blocks",false,[],null,this["blocks"]) && ((y = this._getIntermediate()), true)}) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Binding"].concat(x,[y])))};
Parser.prototype["bindingForm"] = function $bindingForm() {var x, y;return (this._rule("bindingOp",false,[],null,this["bindingOp"]) && this._rule("spaces",false,[],null,this["spaces"]) && this._rule("expression",false,[],null,this["expression"]) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._optional(function() {return (this._rule("token",true,["use"],null,this["token"]) && this._rule("bindingNames",false,[],null,this["bindingNames"]) && ((y = this._getIntermediate()), true))}) && this._exec([x,y]))};
Parser.prototype["bindingOp"] = function $bindingOp() {return (this._match("="))};
Parser.prototype["filter"] = function $filter() {var x, y, z, e;return (this._list(function() {return this._rule("filterStart",false,[],null,this["filterStart"]) && this._rule("filterName",false,[],null,this["filterName"]) && ((x = this._getIntermediate()), true) && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((y = this._getIntermediate()), true)}) && this._list(function() {return this._rule("blocks",false,[],null,this["blocks"]) && ((z = this._getIntermediate()), true)}) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Filter",x,y,z]))};
Parser.prototype["filterStart"] = function $filterStart() {return (this._match(":"))};
Parser.prototype["filterName"] = function $filterName() {return (this._many(function() {  return this._atomic(function() { return this._rule("letter",false,[],null,this["letter"])  });}))};
Parser.prototype["text"] = function $text() {var x, y, e, x, y, e, x, y, e, x, y, e, x, y, e, tag, x, y, e;return (this._atomic(function() {return (this._list(function() {return this._rule("stringLiteral",false,[],null,this["stringLiteral"]) && ((x = this._getIntermediate()), true)}) && this._skip() && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Text",x[1]]))}) || this._atomic(function() {return (this._list(function() {return this._match("'") && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((x = this._getIntermediate()), true)}) && this._skip() && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Text",[x].concat(y)]))}) || this._atomic(function() {return (this._list(function() {return this._match("\"") && this._rule("templateString",false,[],null,this["templateString"]) && ((x = this._getIntermediate()), true)}) && this._rule("templateStrings",false,[],null,this["templateStrings"]) && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Quasi","",[x].concat(y)]))}) || this._atomic(function() {return (this._list(function() {return this._match("â€˜") && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((x = this._getIntermediate()), true)}) && this._skip() && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Quasi","Unicode",[x].concat(y)]))}) || this._atomic(function() {return (this._list(function() {return this._match("â€œ") && this._rule("templateString",false,[],null,this["templateString"]) && ((x = this._getIntermediate()), true)}) && this._rule("templateStrings",false,[],null,this["templateStrings"]) && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Quasi","Unicode",[x].concat(y)]))}) || this._atomic(function() {return (this._list(function() {return this._rule("quasiTag",false,[],null,this["quasiTag"]) && ((tag = this._getIntermediate()), true) && this._match("`") && this._rule("templateString",false,[],null,this["templateString"]) && ((x = this._getIntermediate()), true)}) && this._rule("templateStrings",false,[],null,this["templateStrings"]) && ((y = this._getIntermediate()), true) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(["Quasi",tag,[x].concat(y)]))}))};
Parser.prototype["quasiTag"] = function $quasiTag() {return (this._atomic(function() {return this._rule("identifier",false,[],null,this["identifier"])}) || this._atomic(function() {return this._rule("empty",false,[],null,this["empty"])}))};
Parser.prototype["templateString"] = function $templateString() {return (this._any(function() {  return this._atomic(function() { return (this._atomic(function() {return this._rule("interpolation",false,[],null,this["interpolation"])}) || this._atomic(function() {return this._rule("char",false,[],null,this["char"])}))  });}))};
Parser.prototype["templateStrings"] = function $templateStrings() {var y;return (this._list(function() {return this._any(function() {  return this._atomic(function() { return (this._atomic(function() {var x;return this._rule("skip",false,[],null,this["skip"]) && ((x = this._getIntermediate()), true) && this._exec(x)}) || this._atomic(function() {var x;return this._list(function() {return this._rule("templateString",false,[],null,this["templateString"]) && ((x = this._getIntermediate()), true)}) && this._exec(x)}))  });}) && ((y = this._getIntermediate()), true)}) && this._exec(y))};
Parser.prototype["interpolation"] = function $interpolation() {var x;return (this._match("{") && this._rule("expression",false,[],null,this["expression"]) && ((x = this._getIntermediate()), true) && this._match("}") && this._exec(x))};
Parser.prototype["element"] = function $element() {var tag, cls, id, bind, body, e;return (this._list(function() {return this._rule("tagName",false,[],null,this["tagName"]) && ((tag = this._getIntermediate()), true) && this._rule("classList",false,[],null,this["classList"]) && ((cls = this._getIntermediate()), true) && this._optional(function() {return this._rule("id",false,[],null,this["id"])}) && ((id = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._optional(function() {return this._rule("binding",false,[],null,this["binding"])}) && ((bind = this._getIntermediate()), true)}) && this._list(function() {return this._rule("blocks",false,[],null,this["blocks"]) && ((body = this._getIntermediate()), true)}) && this._skip() && ((e = this._getIntermediate()), true) && this._exec(bind?["Binding",bind[0],bind[1],["Element",tag,[cls,id],body]]:["Element",tag,[cls,id],body]))};
Parser.prototype["simpleName"] = function $simpleName() {var x;return (this._many(function() {  return this._atomic(function() { return (this._atomic(function() {return this._rule("escapedChar",false,[],null,this["escapedChar"])}) || this._atomic(function() {return !this._atomic(function() {return (this._match(".") || this._match("#") || this._atomic(function() {return this._rule("space",false,[],null,this["space"])}))}, true) && this._rule("char",false,[],null,this["char"])}))  });}) && ((x = this._getIntermediate()), true) && this._exec(x.join("")))};
Parser.prototype["tagName"] = function $tagName() {return (this._rule("simpleName",false,[],null,this["simpleName"]))};
Parser.prototype["aclass"] = function $aclass() {return (this._match(".") && this._rule("simpleName",false,[],null,this["simpleName"]))};
Parser.prototype["classList"] = function $classList() {return (this._any(function() {  return this._atomic(function() { return this._rule("aclass",false,[],null,this["aclass"])  });}))};
Parser.prototype["id"] = function $id() {return (this._match("#") && this._rule("simpleName",false,[],null,this["simpleName"]))};
Parser.prototype["attribute"] = function $attribute() {var attr, y, exp, op, x;return (this._list(function() {return this._match("@") && this._rule("attrName",false,[],null,this["attrName"]) && ((attr = this._getIntermediate()), true) && this._optional(function() {return (this._rule("assignmentOperator",false,[],null,this["assignmentOperator"]) && ((op = this._getIntermediate()), true) && this._any(function() {  return this._atomic(function() { return this._rule("char",false,[],null,this["char"])  });}) && ((x = this._getIntermediate()), true))})}) && this._skip() && ((y = this._getIntermediate()), true) && this._rule("expression",false,[x.concat(y.join(""))],null,this["expression"]) && ((exp = this._getIntermediate()), true) && this._exec(["Attribute",attr,op,exp]))};
Parser.prototype["attrName"] = function $attrName() {var x;return (this._many(function() {  return this._atomic(function() { return (!this._atomic(function() {return this._rule("space",false,[],null,this["space"])}, true) && this._rule("char",false,[],null,this["char"]))  });}) && ((x = this._getIntermediate()), true) && this._exec(x.join("")))};
Parser.prototype["assignmentOperator"] = function $assignmentOperator() {var x;return (this._many(function() {  return this._atomic(function() { return this._rule("space",false,[],null,this["space"])  });}) && (this._atomic(function() {return this._optional(function() {return (this._match("+") || this._match("-") || this._match("^") || this._match("$"))}) && this._match("=")})) && ((x = this._getIntermediate()), true) && this._many(function() {  return this._atomic(function() { return this._rule("space",false,[],null,this["space"])  });}) && this._exec(x))};
Parser.prototype["placeholder"] = function $placeholder() {var id, bind, body;return (this._list(function() {return this._rule("id",false,[],null,this["id"]) && ((id = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._optional(function() {return this._rule("bindingForm",false,[],null,this["bindingForm"])}) && ((bind = this._getIntermediate()), true)}) && this._list(function() {return this._rule("blocks",false,[],null,this["blocks"]) && ((body = this._getIntermediate()), true)}) && this._exec(bind?["Binding",bind[0],bind[1],["Placeholder",id,null,body]]:["Placeholder",id,null,body]))};
Parser.prototype["literal"] = function $literal() {return (this._atomic(function() {return this._rule("booleanLiteral",false,[],null,this["booleanLiteral"])}) || this._atomic(function() {return this._rule("numberLiteral",false,[],null,this["numberLiteral"])}) || this._atomic(function() {return this._rule("stringLiteral",false,[],null,this["stringLiteral"])}) || this._atomic(function() {return this._rule("listLiteral",false,[],null,this["listLiteral"])}) || this._atomic(function() {return this._rule("tupleLiteral",false,[],null,this["tupleLiteral"])}))};
Parser.prototype["booleanLiteral"] = function $booleanLiteral() {return (this._atomic(function() {return this._rule("token",true,["true"],null,this["token"]) && this._exec(["True"])}) || this._atomic(function() {return this._rule("token",true,["false"],null,this["token"]) && this._exec(["False"])}))};
Parser.prototype["numberLiteral"] = function $numberLiteral() {var c, d, e, f, g;return (this._atomic(function() {return this._rule("token",true,["NaN"],null,this["token"]) && this._exec(["NaN"])}) || this._atomic(function() {return this._rule("token",true,["Infinite"],null,this["token"]) && this._exec(["PosInf"])}) || this._atomic(function() {return this._rule("token",true,["+Infinite"],null,this["token"]) && this._exec(["PosInf"])}) || this._atomic(function() {return this._rule("token",true,["-Infinite"],null,this["token"]) && this._exec(["NegInf"])}) || this._atomic(function() {var a, b;return this._optional(function() {return (this._match("+") || this._match("-"))}) && ((a = this._getIntermediate()), true) && this._many(function() {  return this._atomic(function() { return this._rule("digit",false,[],null,this["digit"])  });}) && ((b = this._getIntermediate()), true) && this._optional(function() {return (this._match(".") && ((c = this._getIntermediate()), true) && this._any(function() {  return this._atomic(function() { return this._rule("digit",false,[],null,this["digit"])  });}) && ((d = this._getIntermediate()), true))}) && this._optional(function() {return (this._match("e") && ((e = this._getIntermediate()), true) && (this._match("+") || this._match("-")) && ((f = this._getIntermediate()), true) && this._many(function() {  return this._atomic(function() { return this._rule("digit",false,[],null,this["digit"])  });}) && ((g = this._getIntermediate()), true))}) && this._exec(["Number",parseFloat([].concat(a,b,c,d,e,f,g).join(""))])}))};
Parser.prototype["stringLiteral"] = function $stringLiteral() {var x, x;return (this._atomic(function() {return (this._match("\"") && this._any(function() {  return this._atomic(function() { return (this._atomic(function() {return this._rule("escapedChar",false,[],null,this["escapedChar"])}) || this._atomic(function() {return !this._atomic(function() {return this._match("\"")}, true) && this._rule("char",false,[],null,this["char"])}))  });}) && ((x = this._getIntermediate()), true) && this._match("\"") && this._exec(["String",x]))}) || this._atomic(function() {return (this._match("'") && this._any(function() {  return this._atomic(function() { return (!this._atomic(function() {return this._match("'")}, true) && this._rule("char",false,[],null,this["char"]))  });}) && ((x = this._getIntermediate()), true) && this._match("'") && this._exec(["String",x]))}))};
Parser.prototype["escapedChar"] = function $escapedChar() {return (this._atomic(function() {return this._match("\\") && this._match("n") && this._exec("\n")}) || this._atomic(function() {return this._match("\\") && this._match("r") && this._exec("\r")}) || this._atomic(function() {return this._match("\\") && this._match("t") && this._exec("	")}) || this._atomic(function() {return this._match("\\") && this._match("f") && this._exec("\f")}) || this._atomic(function() {return this._match("\\") && this._match("v") && this._exec("")}) || this._atomic(function() {var u;return this._match("\\") && (this._atomic(function() {return this._rule("hexChar",false,[],null,this["hexChar"]) && this._optional(function() {return this._rule("hexChar",false,[],null,this["hexChar"])}) && this._optional(function() {return this._rule("hexChar",false,[],null,this["hexChar"])}) && this._optional(function() {return this._rule("hexChar",false,[],null,this["hexChar"])}) && this._optional(function() {return this._rule("hexChar",false,[],null,this["hexChar"])}) && this._optional(function() {return this._rule("hexChar",false,[],null,this["hexChar"])})})) && ((u = this._getIntermediate()), true) && this._optional(function() {return this._rule("space",false,[],null,this["space"])}) && this._exec(toUTF16(parseInt(u,16)))}) || this._atomic(function() {var u;return this._match("\\") && this._match("u") && (this._atomic(function() {return this._rule("hexChar",false,[],null,this["hexChar"]) && this._rule("hexChar",false,[],null,this["hexChar"]) && this._rule("hexChar",false,[],null,this["hexChar"]) && this._rule("hexChar",false,[],null,this["hexChar"])})) && ((u = this._getIntermediate()), true) && this._exec(String.fromCharCode(parseInt(u,16)))}) || this._atomic(function() {var c;return this._match("\\") && this._rule("char",false,[],null,this["char"]) && ((c = this._getIntermediate()), true) && this._exec(c)}))};
Parser.prototype["hexChar"] = function $hexChar() {var c;return this._rule("char",false,[],null,this["char"]) && ((c = this._getIntermediate()), true) && (/^[0-9a-f]/i.test(c))};
Parser.prototype["listLiteral"] = function $listLiteral() {var x, y;return (this._match("[") && this._rule("spaces",false,[],null,this["spaces"]) && this._any(function() {  return this._atomic(function() { return (this._rule("listItem",false,[],null,this["listItem"]) && this._rule("comma",false,[],null,this["comma"]))  });}) && ((x = this._getIntermediate()), true) && this._optional(function() {return this._rule("listItem",false,[],null,this["listItem"])}) && ((y = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._match("]") && this._exec(["List",y?x.concat([y]):x]))};
Parser.prototype["listItem"] = function $listItem() {return (this._rule("expression",false,[],null,this["expression"]))};
Parser.prototype["tupleLiteral"] = function $tupleLiteral() {var x, y;return (this._match("(") && this._rule("spaces",false,[],null,this["spaces"]) && this._any(function() {  return this._atomic(function() { return (this._rule("tupleItem",false,[],null,this["tupleItem"]) && this._rule("comma",false,[],null,this["comma"]))  });}) && ((x = this._getIntermediate()), true) && this._optional(function() {return this._rule("tupleItem",false,[],null,this["tupleItem"])}) && ((y = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._match(")") && this._exec(["Tuple",y?x.concat([y]):x]))};
Parser.prototype["tupleItem"] = function $tupleItem() {return (this._rule("expression",false,[],null,this["expression"]))};
Parser.prototype["comma"] = function $comma() {return (this._rule("spaces",false,[],null,this["spaces"]) && this._match(",") && this._rule("spaces",false,[],null,this["spaces"]))};
Parser.prototype["expression"] = function $expression() {return (this._rule("exp1",false,[],null,this["exp1"]))};
Parser.prototype["op1"] = function $op1() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["->"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["<-"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["op2"] = function $op2() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["||"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["&&"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["op3"] = function $op3() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["==="],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["!=="],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["=="],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["!="],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["<=>"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,[">="],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["<="],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,[">"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["<"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["op4"] = function $op4() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["<<<"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,[">>>"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["<<"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,[">>"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["op5"] = function $op5() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["?:"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["op6"] = function $op6() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["+"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["-"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["op7"] = function $op7() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["Ã—"],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["Ã·"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["op8"] = function $op8() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["!"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["op9"] = function $op9() {var x;return (this._rule("spaces",false,[],null,this["spaces"]) && (this._atomic(function() {return this._rule("token",true,["?."],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["."],null,this["token"])}) || this._atomic(function() {return this._rule("token",true,["!"],null,this["token"])})) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._exec(x))};
Parser.prototype["exp1"] = function $exp1() {return (this._atomic(function() {var x, op, y;return this._rule("exp1",false,[],null,this["exp1"]) && ((x = this._getIntermediate()), true) && this._rule("op1",false,[],null,this["op1"]) && ((op = this._getIntermediate()), true) && this._rule("exp2",false,[],null,this["exp2"]) && ((y = this._getIntermediate()), true) && this._exec(["BinaryOp",op,x,y])}) || this._atomic(function() {return this._rule("exp2",false,[],null,this["exp2"])}))};
Parser.prototype["exp2"] = function $exp2() {return (this._atomic(function() {var x, op, y;return this._rule("exp2",false,[],null,this["exp2"]) && ((x = this._getIntermediate()), true) && this._rule("op2",false,[],null,this["op2"]) && ((op = this._getIntermediate()), true) && this._rule("exp3",false,[],null,this["exp3"]) && ((y = this._getIntermediate()), true) && this._exec(["BinaryOp",op,x,y])}) || this._atomic(function() {return this._rule("exp3",false,[],null,this["exp3"])}))};
Parser.prototype["exp3"] = function $exp3() {return (this._atomic(function() {var x, op, y;return this._rule("exp3",false,[],null,this["exp3"]) && ((x = this._getIntermediate()), true) && this._rule("op3",false,[],null,this["op3"]) && ((op = this._getIntermediate()), true) && this._rule("exp4",false,[],null,this["exp4"]) && ((y = this._getIntermediate()), true) && this._exec(["BinaryOp",op,x,y])}) || this._atomic(function() {return this._rule("exp4",false,[],null,this["exp4"])}))};
Parser.prototype["exp4"] = function $exp4() {return (this._atomic(function() {var x, op, y;return this._rule("exp4",false,[],null,this["exp4"]) && ((x = this._getIntermediate()), true) && this._rule("op4",false,[],null,this["op4"]) && ((op = this._getIntermediate()), true) && this._rule("exp5",false,[],null,this["exp5"]) && ((y = this._getIntermediate()), true) && this._exec(["BinaryOp",op,x,y])}) || this._atomic(function() {return this._rule("exp5",false,[],null,this["exp5"])}))};
Parser.prototype["exp5"] = function $exp5() {return (this._atomic(function() {var x, op, y;return this._rule("exp5",false,[],null,this["exp5"]) && ((x = this._getIntermediate()), true) && this._rule("op5",false,[],null,this["op5"]) && ((op = this._getIntermediate()), true) && this._rule("exp6",false,[],null,this["exp6"]) && ((y = this._getIntermediate()), true) && this._exec(["BinaryOp",op,x,y])}) || this._atomic(function() {return this._rule("exp6",false,[],null,this["exp6"])}))};
Parser.prototype["exp6"] = function $exp6() {return (this._atomic(function() {var x, op, y;return this._rule("exp6",false,[],null,this["exp6"]) && ((x = this._getIntermediate()), true) && this._rule("op6",false,[],null,this["op6"]) && ((op = this._getIntermediate()), true) && this._rule("exp7",false,[],null,this["exp7"]) && ((y = this._getIntermediate()), true) && this._exec(["BinaryOp",op,x,y])}) || this._atomic(function() {return this._rule("exp7",false,[],null,this["exp7"])}))};
Parser.prototype["exp7"] = function $exp7() {return (this._atomic(function() {var x, op, y;return this._rule("exp7",false,[],null,this["exp7"]) && ((x = this._getIntermediate()), true) && this._rule("op7",false,[],null,this["op7"]) && ((op = this._getIntermediate()), true) && this._rule("exp8",false,[],null,this["exp8"]) && ((y = this._getIntermediate()), true) && this._exec(["BinaryOp",op,x,y])}) || this._atomic(function() {return this._rule("exp8",false,[],null,this["exp8"])}))};
Parser.prototype["exp8"] = function $exp8() {return (this._atomic(function() {var op, x;return this._rule("op8",false,[],null,this["op8"]) && ((op = this._getIntermediate()), true) && this._rule("exp8",false,[],null,this["exp8"]) && ((x = this._getIntermediate()), true) && this._exec(["UnaryOp",op,x])}) || this._atomic(function() {return this._rule("exp9",false,[],null,this["exp9"])}))};
Parser.prototype["exp9"] = function $exp9() {return (this._atomic(function() {var x, op, y;return this._rule("exp9",false,[],null,this["exp9"]) && ((x = this._getIntermediate()), true) && this._rule("op9",false,[],null,this["op9"]) && ((op = this._getIntermediate()), true) && this._rule("exp9",false,[],null,this["exp9"]) && ((y = this._getIntermediate()), true) && this._exec(["BinaryOp",op,x,y])}) || this._atomic(function() {return this._rule("atomic",false,[],null,this["atomic"])}))};
Parser.prototype["atomic"] = function $atomic() {return (this._atomic(function() {return this._rule("literal",false,[],null,this["literal"])}) || this._atomic(function() {return this._rule("variable",false,[],null,this["variable"])}))};
Parser.prototype["variable"] = function $variable() {var x, y, id;return (this._rule("identifier",false,[],null,this["identifier"]) && ((x = this._getIntermediate()), true) && this._any(function() {  return this._atomic(function() { return (this._match("/") && this._rule("identifier",false,[],null,this["identifier"]) && ((id = this._getIntermediate()), true) && this._exec(id))  });}) && ((y = this._getIntermediate()), true) && this._exec(["Ref",x].concat(y)))};
Parser.prototype["identifier"] = function $identifier() {return (this._match("*") || this._atomic(function() {return this._many(function() {  return this._atomic(function() { return (this._atomic(function() {return this._rule("digit",false,[],null,this["digit"])}) || this._atomic(function() {return this._rule("letter",false,[],null,this["letter"])}))  });})}))};
Parser.prototype["parameters"] = function $parameters() {return (this._rule("listOf",false,["identifier",","],null,this["listOf"]))};
Parser.prototype["bindingNames"] = function $bindingNames() {return (this._atomic(function() {return this._rule("parameters",false,[],null,this["parameters"])}) || this._atomic(function() {var x;return this._match("(") && this._rule("spaces",false,[],null,this["spaces"]) && this._rule("parameters",false,[],null,this["parameters"]) && ((x = this._getIntermediate()), true) && this._rule("spaces",false,[],null,this["spaces"]) && this._match(")") && this._exec(x)}))};
Parser.prototype["END"] = function $END() {return true};
test(Parser, ["", "head", "\t@title = 0", "\ttitle", "\t\t\"Hello {user}"], "blocks")
